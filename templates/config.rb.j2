# encoding: utf-8

##
# Backup v4.x Configuration
#
# Documentation: http://backup.github.io/backup/v4/
# Issue Tracker: https://github.com/backup/backup/issues

require '{{ backup_setup.config_dir }}/cli_s3_syncer.rb'

{% if backup_notifier is defined %}
{% if backup_notifier.slack is defined %}
Notifier::Slack.defaults do |slack|
  slack.on_success = {{ backup_notifier.slack.on_success }}
  slack.on_warning = {{ backup_notifier.slack.on_warning }}
  slack.on_failure = {{ backup_notifier.slack.on_failure }}

  # The integration token
  slack.webhook_url = '{{ backup_notifier.slack.webhook_url }}'

  # The channel to which messages will be sent
  slack.channel = '{{ backup_notifier.slack.channel }}'

  # The username to display along with the notification
  slack.username = '{{ backup_notifier.slack.username }}'
end
{% endif %}

{% if backup_notifier.mail is defined %}
Notifier::Mail.defaults do |mail|
  mail.on_success           = {{ backup_notifier.mail.on_success }}
  mail.on_warning           = {{ backup_notifier.mail.on_warning }}
  mail.on_failure           = true
  mail.from                 = '{{ backup_notifier.mail.from }}'
  mail.to                   = '{{ backup_notifier.mail.to }}'
  mail.address              = '{{ backup_notifier.mail.address }}'
  mail.port                 = {{ backup_notifier.mail.port }}
  mail.domain               = '{{ backup_notifier.mail.domain }}'
  mail.user_name            = '{{ backup_notifier.mail.user_name }}'
  mail.password             = '{{ backup_notifier.mail.password }}'
  mail.authentication       = {{ backup_notifier.mail.authentication }}
  mail.encryption           = {{ backup_notifier.mail.encryption }}
end
{% endif %}
{% endif %}

{% if backup_databases.PostgreSQL is defined %}
Database::PostgreSQL.defaults do |db|
  db.username           = "{{ backup_databases.PostgreSQL.username }}"
  db.password           = "{{ backup_databases.PostgreSQL.password }}"
  db.host               = "{{ backup_databases.PostgreSQL.host }}"
  db.port               = {{ backup_databases.PostgreSQL.port }}
  db.additional_options = ["-xc", "-E=utf8"]
end
{% endif %}

{% if backup_databases.MongoDB is defined %}
Database::MongoDB.defaults do |db|
{% if backup_databases.MongoDB.username is defined %}
  db.username           = "{{ backup_databases.MongoDB.username }}"
{% endif %}
{% if backup_databases.MongoDB.password is defined %}
  db.password           = "{{ backup_databases.MongoDB.password }}"
{% endif %}
  db.host               = "{{ backup_databases.MongoDB.host }}"
  db.port               = {{ backup_databases.MongoDB.port }}
  db.ipv6               = {{ backup_databases.MongoDB.ipv6 }}
  db.lock               = {{ backup_databases.MongoDB.lock }}
  db.additional_options = {{ backup_databases.MongoDB.additional_options }}
end
{% endif %}

{% if backup_databases.MySQL is defined %}
Database::MySQL.defaults do |db|
  db.username           = "{{ backup_databases.MySQL.username }}"
  db.password           = "{{ backup_databases.MySQL.password }}"
  db.host               = "{{ backup_databases.MySQL.host }}"
  db.port               = {{ backup_databases.MySQL.port }}
  db.additional_options = ["--quick", "--single-transaction"]
end
{% endif %}

{% if backup_encryption.OpenSSL is defined %}
Encryptor::OpenSSL.defaults do |encryption|
  encryption.password = '{{ backup_encryption.OpenSSL.password }}'
  encryption.base64   = {{ backup_encryption.OpenSSL.base64 }}
  encryption.salt     = {{ backup_encryption.OpenSSL.salt }}
end
{% endif %}

{% if backup_store.SFTP is defined %}
Storage::SFTP.defaults do |server|
  server.username   = '{{ backup_store.SFTP.username }}'
  server.password   = '{{ backup_store.SFTP.password }}'
  server.ip         = '{{ backup_store.SFTP.ip }}'
  server.port       = {{ backup_store.SFTP.port }}
  server.path       = '{{ backup_store.SFTP.path }}'
end
{% endif %}

{% if backup_store.S3 is defined %}
Storage::S3.defaults do |s3|
  s3.access_key_id     = '{{ backup_store.S3.access_key_id }}'
  s3.secret_access_key = '{{ backup_store.S3.secret_access_key }}'
  s3.region            = '{{ backup_store.S3.region }}'
  s3.bucket            = '{{ backup_store.S3.bucket }}'
  s3.path              = '{{ backup_store.S3.path }}'
  s3.storage_class     = :standard_ia
end

Syncer::Cloud::S3.defaults do |s3|
  s3.access_key_id     = '{{ backup_store.S3.access_key_id }}'
  s3.secret_access_key = '{{ backup_store.S3.secret_access_key }}'
  s3.region            = '{{ backup_store.S3.region }}'
  s3.bucket            = '{{ backup_store.S3.bucket }}'
  s3.path              = '{{ backup_store.S3.path }}'
  s3.storage_class     = :standard
  s3.mirror            = false
end

Syncer::Cloud::CliS3Syncer.defaults do |s3|
  s3.access_key_id     = '{{ backup_store.S3.access_key_id }}'
  s3.secret_access_key = '{{ backup_store.S3.secret_access_key }}'
  s3.region            = '{{ backup_store.S3.region }}'
  s3.bucket            = '{{ backup_store.S3.bucket }}'
  s3.path              = '{{ backup_store.S3.path }}'
  s3.storage_class     = :standard_ia
end
{% endif %}

preconfigure 'TemplateModel' do
  compress_with Gzip
  split_into_chunks_of {{ backup_config_chunks }}

{% if backup_notifier.mail is defined %}
  notify_by Mail
{% endif %}

{% if backup_notifier.slack is defined %}
  notify_by Slack
{% endif %}

{% if backup_encryption.OpenSSL is defined %}
  encrypt_with OpenSSL
{% endif %}
end
